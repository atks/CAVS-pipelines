#!/usr/bin/env python3

# The MIT License
# Copyright (c) 2024 Adrian Tan <adrian_tan@nparks.gov.sg>
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the 'Software'), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

import click

@click.command()
def main():
    """
    Generate bioinformatics commands examples
    """
    print("#download NC_004003.1 in FASTA format from NCBI")
    print("efetch -db nuccore -id NC_004003.1 -format fasta > NC_004003.1.fasta")
    print("#download NC_004003.1 in GENBANK format from NCBI")
    print("efetch -db nuccore -id NC_004003.1 -format genbank > NC_004003.1.genbank")
    print("#multiply align sequences in 72seq.fasta")
    print("mafft 72seq.fasta > 72seq.msa")
    print("#add sequences in 2seq.fasta to 72 sequence multiple alignment")
    print("mafft --add 2seq.fasta 72seq.msa > 74seq.msa")
    print("#construct maximum likelihood trees with bootstrap")
    print("raxml-ng --threads 10 --msa asfv.msa --model GTR+G --redo --prefix asfv --bootstrap")
    print("#construct consensus tree from bootstrap trees")
    print("raxml-ng --consense MRE --tree asfv.raxml.bootstraps --redo --prefix asfv")
    print("#quast report")
    print("quast.py contigs_1.fasta contigs_2.fasta -r ref.fasta -g genes.txt -1 r1.fastq.gz -2 r2.fastq.gz -o quast_results")
    print("#quast report")
    print("quast.py contigs_1.fasta contigs_2.fasta -r ref.fasta -g genes.txt -1 r1.fastq.gz -2 r2.fastq.gz -o quast_results")
    print("quast.py ilm57/contigs/57_1_1_A112_22-1_ASFV_spleen.contigs.fasta -1 ilm57/57_1_1_A112_22-1_ASFV_spleen_R1.fastq.gz  -2 ilm57/57_1_1_A112_22-1_ASFV_spleen_R2.fastq.gz  -o quast_result")
    print("#build bwa index")
    print("bwa index -a bwtsw ref.fasta")
    print("#align with bwa")
    print("bwa mem -t 2 -M ref.fasta r1.fastq r2.fastq | samtools view -hF4 | samtools sort -o out.bam")
    print("#build bowtie2 index")
    print("bowtie2-build ref.fa asfv")
    print("#align with bowtie2")
    print("bowtie2 -x ref/asfv -1 r1.fastq -2 r2.fastq")
    print("#blastdb extract fasta from blastdb")
    print("blastdbcmd -entry all -db Apicomplexandb -out apicomplexan.fasta")
    print("#blastdb print species of sequences in blastdb")
    print("blastdbcmd -entry all -db SSU_eukaryote_rRNA -outfmt \"%a %T %K %S\"")
    print("#blastdb print species of sequences in blastdb (tab delimited)")
    print("blastdbcmd -entry all -db SSU_eukaryote_rRNA -outfmt $'%a\\t%T\\t%K\\t%S'")
    print("#blastdb print species of sequences in blastdb")
    print("makeblastdb -in apicomplexan.fasta -parse_seqids -blastdb_version 5 -title apicomplexan -dbtype nucl -out apicomplexan")
    print("#download taxonomic database")
    print("wget ftp://ftp.ncbi.nlm.nih.gov/blast/db/taxdb.tar.gz")
    print("#decrypting text")
    print("cat a.des3 | openssl des3 -d -pbkdf2")
    print("#blasting")
    print("export BLASTDB=/db/blast/nt/; blastn  -db /db/blast/nt/nt -query contigs.fasta -outfmt \"6 qacc sacc qlen slen score length pident stitle staxids sscinames scomnames sskingdoms\" -max_target_seqs 20 -evalue 1e-5 -task megablast -out blast.results.txt")

if __name__ == "__main__":
    main() # type: ignore[arg-type]
