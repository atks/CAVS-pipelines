#!/usr/bin/env python3

# The MIT License
# Copyright (c) 2024 Adrian Tan <adrian_tan@nparks.gov.sg>
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the 'Software'), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

import os
import click


@click.command()
@click.argument("input_newick_file")
@click.option("-o", "--output_newick_file", required=True, help="output newick file")
@click.option("-s", "--sample_file", required=True, help="sample file")
def main(input_newick_file, output_newick_file, sample_file):
    """
    Renames samples in newick file.

    e.g. rename_newick_trees lsdv.tree -o lsdv.renamed.tree -s lsdv_ref.sa
    """
    name_pairs = []

    with open(sample_file, "r") as file:
        for line in file:
            if not line.startswith("#"):
                old_name, new_name = line.rstrip().split("\t")
                name_pairs.append(NamePair(old_name, new_name))

    no_replaced = 0
    no_trees = 0
    with open(input_newick_file, "r") as file:
        with open(output_newick_file, "w") as out:
            for line in file:
                no_trees += 1
                for p in name_pairs:
                    if p.old_name in line:
                        print(f"replacing {p.old_name} with {p.new_name}")
                        line = line.replace(p.old_name, f"{p.new_name}")
                        no_replaced += 1
                out.write(line)


    print(f"{no_replaced} names replaced in {no_trees} trees")

class NamePair(object):
    def __init__(self, old_name, new_name):
        self.old_name = old_name
        self.new_name = new_name

    def print(self):
        print(f"old name          : {self.old_name}")
        print(f"new name          : {self.new_name}")

if __name__ == "__main__":
    main() # type: ignore[arg-type]
